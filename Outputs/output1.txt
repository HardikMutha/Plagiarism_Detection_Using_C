INT int
Function get_index(
Keyword char
Identifier ch
Delimiter )
SpDelim {
Keyword return
Delimiter (
INT int
Delimiter )
Identifier ch
Arithmatic -
Integer 97
SpDelim ;
SpDelim }
Keyword void
Function initGraph(
Identifier graph
Arithmatic *
Identifier g
Delimiter ,
INT int
Keyword size
Delimiter )
SpDelim {
Function if(
Keyword size
Relational <=
Integer 0
Delimiter )
Keyword return
SpDelim ;
Identifier g
Arithmatic -
Relational >
Identifier arr
Assign =
Delimiter (
Identifier node
Arithmatic *
Arithmatic *
Delimiter )
Function calloc(
Keyword size
Delimiter ,
Function sizeof(
Identifier node
Arithmatic *
Delimiter )
Delimiter )
SpDelim ;
Identifier g
Arithmatic -
Relational >
Keyword size
Assign =
Keyword size
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function insertEdge(
Identifier graph
Arithmatic *
Identifier g
Delimiter ,
Keyword char
Identifier start
Delimiter ,
Keyword char
Identifier end
Delimiter ,
INT int
Identifier weight
Delimiter )
SpDelim {
INT int
Identifier start_in
Assign =
Function get_index(
Identifier start
Delimiter )
SpDelim ;
Function if(
Logical !
Delimiter (
Identifier start_in
Relational >=
Integer 0
Logical &&
Identifier start_in
Relational <
Identifier g
Arithmatic -
Relational >
Keyword size
Delimiter )
Delimiter )
Keyword return
SpDelim ;
Identifier node
Arithmatic *
Identifier nn
Assign =
Delimiter (
Identifier node
Arithmatic *
Delimiter )
Function malloc(
Function sizeof(
Identifier node
Delimiter )
Delimiter )
SpDelim ;
Function if(
Identifier nn
Relational ==
Constant NULL
Delimiter )
Keyword return
SpDelim ;
Identifier nn
Arithmatic -
Relational >
Identifier vertex
Assign =
Identifier end
SpDelim ;
Identifier nn
Arithmatic -
Relational >
Identifier edgeWeight
Assign =
Identifier weight
SpDelim ;
Identifier nn
Arithmatic -
Relational >
Identifier next
Assign =
Constant NULL
SpDelim ;
Identifier node
Arithmatic *
Identifier p
Assign =
Identifier g
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier start_in
Delimiter ]
SpDelim ;
Function if(
Identifier p
Relational ==
Constant NULL
Delimiter )
SpDelim {
Identifier g
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier start_in
Delimiter ]
Assign =
Identifier nn
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
Function while(
Identifier p
Arithmatic -
Relational >
Identifier next
Relational !=
Constant NULL
Delimiter )
Identifier p
Assign =
Identifier p
Arithmatic -
Relational >
Identifier next
SpDelim ;
Identifier p
Arithmatic -
Relational >
Identifier next
Assign =
Identifier nn
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function insertUndirectedEdge(
Identifier graph
Arithmatic *
Identifier g
Delimiter ,
Keyword char
Identifier start
Delimiter ,
Keyword char
Identifier end
Delimiter ,
INT int
Identifier weight
Delimiter )
SpDelim {
Function insertEdge(
Identifier g
Delimiter ,
Identifier start
Delimiter ,
Identifier end
Delimiter ,
Identifier weight
Delimiter )
SpDelim ;
Function insertEdge(
Identifier g
Delimiter ,
Identifier end
Delimiter ,
Identifier start
Delimiter ,
Identifier weight
Delimiter )
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function removeEdge(
Identifier graph
Arithmatic *
Identifier g
Delimiter ,
Keyword char
Identifier start
Delimiter ,
Keyword char
Identifier end
Delimiter )
SpDelim {
INT int
Identifier start_in
Assign =
Function get_index(
Identifier start
Delimiter )
SpDelim ;
Function if(
Logical !
Delimiter (
Identifier start_in
Relational >=
Integer 0
Logical &&
Identifier start_in
Relational <
Identifier g
Arithmatic -
Relational >
Keyword size
Delimiter )
Delimiter )
Keyword return
SpDelim ;
Identifier node
Arithmatic *
Identifier p
Assign =
Identifier g
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier start_in
Delimiter ]
Delimiter ,
Arithmatic *
Identifier q
SpDelim ;
Function while(
Identifier p
Relational !=
Constant NULL
Logical &&
Identifier p
Arithmatic -
Relational >
Identifier vertex
Relational !=
Identifier end
Delimiter )
SpDelim {
Identifier q
Assign =
Identifier p
SpDelim ;
Identifier p
Assign =
Identifier p
Arithmatic -
Relational >
Identifier next
SpDelim ;
SpDelim }
Function if(
Identifier p
Relational ==
Constant NULL
Delimiter )
Keyword return
SpDelim ;
Function if(
Identifier p
Relational ==
Identifier g
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier start_in
Delimiter ]
Delimiter )
Identifier g
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier start_in
Delimiter ]
Assign =
Identifier p
Arithmatic -
Relational >
Identifier next
SpDelim ;
Keyword else
Identifier q
Arithmatic -
Relational >
Identifier next
Assign =
Identifier p
Arithmatic -
Relational >
Identifier next
SpDelim ;
Function free(
Identifier p
Delimiter )
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function removeUndirectedEdge(
Identifier graph
Arithmatic *
Identifier g
Delimiter ,
Keyword char
Identifier start
Delimiter ,
Keyword char
Identifier end
Delimiter )
SpDelim {
Function removeEdge(
Identifier g
Delimiter ,
Identifier start
Delimiter ,
Identifier end
Delimiter )
SpDelim ;
Function removeEdge(
Identifier g
Delimiter ,
Identifier end
Delimiter ,
Identifier start
Delimiter )
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function graphBFS(
Identifier graph
Identifier g
Delimiter ,
Keyword char
Identifier start
Delimiter )
SpDelim {
INT int
Identifier start_in
Assign =
Function get_index(
Identifier start
Delimiter )
SpDelim ;
Function if(
Logical !
Delimiter (
Identifier start_in
Relational >=
Integer 0
Logical &&
Identifier start_in
Relational <
Identifier g
Delimiter .
Keyword size
Delimiter )
Delimiter )
Keyword return
SpDelim ;
INT int
Arithmatic *
Identifier visited
Assign =
Delimiter (
INT int
Arithmatic *
Delimiter )
Function calloc(
Identifier g
Delimiter .
Keyword size
Delimiter ,
Function sizeof(
INT int
Delimiter )
Delimiter )
SpDelim ;
INT int
Arithmatic *
Identifier queue
Assign =
Delimiter (
INT int
Arithmatic *
Delimiter )
Function calloc(
Identifier g
Delimiter .
Keyword size
Delimiter ,
Function sizeof(
INT int
Delimiter )
Delimiter )
SpDelim ;
INT int
Identifier front
Assign =
Integer 0
Delimiter ,
Identifier rear
Assign =
Integer 0
SpDelim ;
Function printf(
String "%c "
Delimiter ,
Identifier start
Delimiter )
SpDelim ;
Identifier visited
Delimiter [
Identifier start_in
Delimiter ]
Assign =
Integer 1
SpDelim ;
Identifier queue
Delimiter [
Identifier rear
Relational ++
Delimiter ]
Assign =
Identifier start_in
SpDelim ;
Function while(
Identifier front
Relational !=
Identifier rear
Delimiter )
SpDelim {
Identifier start_in
Assign =
Identifier queue
Delimiter [
Identifier front
Relational ++
Delimiter ]
SpDelim ;
Identifier node
Arithmatic *
Identifier p
Assign =
Identifier g
Delimiter .
Identifier arr
Delimiter [
Identifier start_in
Delimiter ]
SpDelim ;
Function while(
Identifier p
Relational !=
Constant NULL
Delimiter )
SpDelim {
INT int
Identifier index
Assign =
Function get_index(
Identifier p
Arithmatic -
Relational >
Identifier vertex
Delimiter )
SpDelim ;
Function if(
Identifier visited
Delimiter [
Identifier index
Delimiter ]
Relational ==
Integer 0
Delimiter )
SpDelim {
Function printf(
String "%c "
Delimiter ,
Identifier p
Arithmatic -
Relational >
Identifier vertex
Delimiter )
SpDelim ;
Identifier visited
Delimiter [
Identifier index
Delimiter ]
Assign =
Integer 1
SpDelim ;
Identifier queue
Delimiter [
Identifier rear
Relational ++
Delimiter ]
Assign =
Identifier index
SpDelim ;
SpDelim }
Identifier p
Assign =
Identifier p
Arithmatic -
Relational >
Identifier next
SpDelim ;
SpDelim }
SpDelim }
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function graphDFS(
Identifier graph
Identifier g
Delimiter ,
Keyword char
Identifier start
Delimiter )
SpDelim {
INT int
Identifier start_in
Assign =
Function get_index(
Identifier start
Delimiter )
SpDelim ;
Function if(
Logical !
Delimiter (
Identifier start_in
Relational >=
Integer 0
Logical &&
Identifier start_in
Relational <
Identifier g
Delimiter .
Keyword size
Delimiter )
Delimiter )
Keyword return
SpDelim ;
INT int
Arithmatic *
Identifier visited
Assign =
Delimiter (
INT int
Arithmatic *
Delimiter )
Function calloc(
Identifier g
Delimiter .
Keyword size
Delimiter ,
Function sizeof(
INT int
Delimiter )
Delimiter )
SpDelim ;
INT int
Arithmatic *
Identifier stack
Assign =
Delimiter (
INT int
Arithmatic *
Delimiter )
Function calloc(
Identifier g
Delimiter .
Keyword size
Delimiter ,
Function sizeof(
INT int
Delimiter )
Delimiter )
SpDelim ;
INT int
Identifier top
Assign =
NegativeInteger -1
Delimiter ,
Identifier flag
Assign =
Integer 0
SpDelim ;
Function printf(
String "%c "
Delimiter ,
Identifier start
Delimiter )
SpDelim ;
Identifier visited
Delimiter [
Identifier start_in
Delimiter ]
Assign =
Integer 1
SpDelim ;
Identifier stack
Delimiter [
Relational ++
Identifier top
Delimiter ]
Assign =
Identifier start_in
SpDelim ;
Function while(
Identifier top
Relational !=
NegativeInteger -1
Delimiter )
SpDelim {
INT int
Identifier start_in
Assign =
Identifier stack
Delimiter [
Identifier top
Arithmatic -
Arithmatic -
Delimiter ]
SpDelim ;
Identifier node
Arithmatic *
Identifier p
Assign =
Identifier g
Delimiter .
Identifier arr
Delimiter [
Identifier start_in
Delimiter ]
SpDelim ;
Function if(
Identifier flag
Delimiter )
Identifier stack
Delimiter [
Relational ++
Identifier top
Delimiter ]
Assign =
Identifier start_in
SpDelim ;
Identifier flag
Assign =
Integer 0
SpDelim ;
Function while(
Identifier p
Relational !=
Constant NULL
Delimiter )
SpDelim {
INT int
Identifier index
Assign =
Function get_index(
Identifier p
Arithmatic -
Relational >
Identifier vertex
Delimiter )
SpDelim ;
Function if(
Identifier visited
Delimiter [
Identifier index
Delimiter ]
Relational ==
Integer 0
Delimiter )
SpDelim {
Identifier flag
Assign =
Integer 1
SpDelim ;
Function printf(
String "%c "
Delimiter ,
Identifier p
Arithmatic -
Relational >
Identifier vertex
Delimiter )
SpDelim ;
Identifier visited
Delimiter [
Identifier index
Delimiter ]
Assign =
Integer 1
SpDelim ;
Identifier stack
Delimiter [
Relational ++
Identifier top
Delimiter ]
Assign =
Identifier index
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Identifier p
Assign =
Identifier p
Arithmatic -
Relational >
Identifier next
SpDelim ;
SpDelim }
SpDelim }
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function displayGraph(
Identifier graph
Identifier g
Delimiter )
SpDelim {
Identifier node
Arithmatic *
Identifier p
SpDelim ;
Function for(
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Identifier i
Relational <
Identifier g
Delimiter .
Keyword size
SpDelim ;
Identifier i
Relational ++
Delimiter )
SpDelim {
Identifier p
Assign =
Identifier g
Delimiter .
Identifier arr
Delimiter [
Identifier i
Delimiter ]
SpDelim ;
Function printf(
String "Edges of %c: "
Delimiter ,
Identifier i
Arithmatic +
Integer 97
Delimiter )
SpDelim ;
Function while(
Identifier p
Relational !=
Constant NULL
Delimiter )
SpDelim {
Function printf(
String "%c "
Delimiter ,
Identifier p
Arithmatic -
Relational >
Identifier vertex
Delimiter )
SpDelim ;
Identifier p
Assign =
Identifier p
Arithmatic -
Relational >
Identifier next
SpDelim ;
SpDelim }
Function printf(
String "\n"
Delimiter )
SpDelim ;
SpDelim }
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function deleteGraph(
Identifier graph
Arithmatic *
Identifier g
Delimiter )
SpDelim {
Function for(
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Identifier i
Relational <
Identifier g
Arithmatic -
Relational >
Keyword size
SpDelim ;
Identifier i
Relational ++
Delimiter )
SpDelim {
Identifier node
Arithmatic *
Identifier p
Assign =
Identifier g
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
SpDelim ;
Function while(
Identifier p
Relational !=
Constant NULL
Delimiter )
SpDelim {
Identifier g
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Assign =
Identifier p
Arithmatic -
Relational >
Identifier next
SpDelim ;
Function free(
Identifier p
Delimiter )
SpDelim ;
Identifier p
Assign =
Identifier g
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
SpDelim ;
SpDelim }
SpDelim }
Function free(
Identifier g
Arithmatic -
Relational >
Identifier arr
Delimiter )
SpDelim ;
Identifier g
Arithmatic -
Relational >
Keyword size
Assign =
Integer 0
SpDelim ;
Keyword return
SpDelim ;
SpDelim }





 Total Tokens = 951