Identifier node
Arithmatic *
Function getNode(
INT int
Identifier val
Delimiter )
SpDelim {
Identifier node
Arithmatic *
Identifier newNode
Assign =
Delimiter (
Identifier node
Arithmatic *
Delimiter )
Function malloc(
Function sizeof(
Identifier node
Delimiter )
Delimiter )
SpDelim ;
Identifier newNode
Arithmatic -
Relational >
Identifier data
Assign =
Identifier val
SpDelim ;
Identifier newNode
Arithmatic -
Relational >
Identifier next
Assign =
Constant NULL
SpDelim ;
Keyword return
Identifier newNode
SpDelim ;
SpDelim }
Keyword void
Function initGraph(
Identifier graph
Arithmatic *
Identifier g
Delimiter ,
INT int
Identifier vertices
Delimiter )
SpDelim {
Identifier g
Arithmatic -
Relational >
Identifier numberVertices
Assign =
Identifier vertices
SpDelim ;
Identifier g
Arithmatic -
Relational >
Identifier lists
Assign =
Delimiter (
Identifier node
Arithmatic *
Arithmatic *
Delimiter )
Function malloc(
Function sizeof(
Identifier node
Arithmatic *
Delimiter )
Arithmatic *
Identifier vertices
Delimiter )
SpDelim ;
Loop for
Delimiter (
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Identifier i
Relational <
Identifier vertices
SpDelim ;
Identifier i
Relational ++
Delimiter )
SpDelim {
Identifier g
Arithmatic -
Relational >
Identifier lists
Delimiter [
Identifier i
Delimiter ]
Assign =
Constant NULL
SpDelim ;
SpDelim }
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function addEdge(
Identifier graph
Arithmatic *
Identifier g
Delimiter ,
INT int
Identifier src
Delimiter ,
INT int
Identifier dest
Delimiter )
SpDelim {
Identifier node
Arithmatic *
Identifier newNode
Assign =
Function getNode(
Identifier dest
Delimiter )
SpDelim ;
Identifier newNode
Arithmatic -
Relational >
Identifier next
Assign =
Identifier g
Arithmatic -
Relational >
Identifier lists
Delimiter [
Identifier src
Delimiter ]
SpDelim ;
Identifier g
Arithmatic -
Relational >
Identifier lists
Delimiter [
Identifier src
Delimiter ]
Assign =
Identifier newNode
SpDelim ;
Identifier node
Arithmatic *
Identifier newNode2
Assign =
Function getNode(
Identifier src
Delimiter )
SpDelim ;
Identifier newNode2
Arithmatic -
Relational >
Identifier next
Assign =
Identifier g
Arithmatic -
Relational >
Identifier lists
Delimiter [
Identifier dest
Delimiter ]
SpDelim ;
Identifier g
Arithmatic -
Relational >
Identifier lists
Delimiter [
Identifier dest
Delimiter ]
Assign =
Identifier newNode2
SpDelim ;
SpDelim }
Keyword void
Function printGraph(
Identifier graph
Identifier g
Delimiter )
SpDelim {
Loop for
Delimiter (
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Identifier i
Relational <
Identifier g
Delimiter .
Identifier numberVertices
SpDelim ;
Identifier i
Relational ++
Delimiter )
SpDelim {
Function printf(
String "%c -> "
Delimiter ,
Delimiter (
Identifier i
Arithmatic +
Delimiter '
Identifier a
Delimiter '
Delimiter )
Delimiter )
SpDelim ;
Identifier node
Arithmatic *
Identifier temp
Assign =
Identifier g
Delimiter .
Identifier lists
Delimiter [
Identifier i
Delimiter ]
SpDelim ;
Loop while
Delimiter (
Identifier temp
Delimiter )
SpDelim {
Function printf(
String "%c,"
Delimiter ,
Delimiter (
Identifier temp
Arithmatic -
Relational >
Identifier data
Arithmatic +
Delimiter '
Identifier a
Delimiter '
Delimiter )
Delimiter )
SpDelim ;
Identifier temp
Assign =
Identifier temp
Arithmatic -
Relational >
Identifier next
SpDelim ;
SpDelim }
Function printf(
String "\n"
Delimiter )
SpDelim ;
SpDelim }
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function free_graph(
Identifier graph
Arithmatic *
Identifier g
Delimiter )
SpDelim {
Loop for
Delimiter (
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Identifier i
Relational <
Identifier g
Arithmatic -
Relational >
Identifier numberVertices
SpDelim ;
Identifier i
Relational ++
Delimiter )
SpDelim {
Identifier node
Arithmatic *
Identifier temp
Assign =
Identifier g
Arithmatic -
Relational >
Identifier lists
Delimiter [
Identifier i
Delimiter ]
SpDelim ;
Loop while
Delimiter (
Identifier temp
Delimiter )
SpDelim {
Identifier node
Arithmatic *
Identifier curr
Assign =
Identifier temp
SpDelim ;
Identifier temp
Assign =
Identifier temp
Arithmatic -
Relational >
Identifier next
SpDelim ;
Function free(
Identifier curr
Delimiter )
SpDelim ;
SpDelim }
Identifier g
Arithmatic -
Relational >
Identifier lists
Delimiter [
Identifier i
Delimiter ]
Assign =
Constant NULL
SpDelim ;
SpDelim }
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function DepthFirstSearch(
Identifier graph
Identifier g
Delimiter )
SpDelim {
INT int
Arithmatic *
Identifier visited
Assign =
Delimiter (
INT int
Arithmatic *
Delimiter )
Function calloc(
Identifier g
Delimiter .
Identifier numberVertices
Delimiter ,
Function sizeof(
INT int
Delimiter )
Delimiter )
SpDelim ;
Function DFS(
Identifier g
Delimiter ,
Identifier visited
Delimiter ,
Integer 0
Delimiter )
SpDelim ;
Function printf(
String "\n"
Delimiter )
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function DFS(
Identifier graph
Identifier g
Delimiter ,
INT int
Arithmatic *
Identifier visited
Delimiter ,
INT int
Identifier val
Delimiter )
SpDelim {
Identifier visited
Delimiter [
Identifier val
Delimiter ]
Assign =
Integer 1
SpDelim ;
Function printf(
String "%c "
Delimiter ,
Identifier val
Arithmatic +
Delimiter '
Identifier a
Delimiter '
Delimiter )
SpDelim ;
Identifier node
Arithmatic *
Identifier temp
Assign =
Identifier g
Delimiter .
Identifier lists
Delimiter [
Identifier val
Delimiter ]
SpDelim ;
Loop while
Delimiter (
Identifier temp
Delimiter )
SpDelim {
Keyword if
Delimiter (
Logical !
Identifier visited
Delimiter [
Identifier temp
Arithmatic -
Relational >
Identifier data
Delimiter ]
Delimiter )
Function DFS(
Identifier g
Delimiter ,
Identifier visited
Delimiter ,
Identifier temp
Arithmatic -
Relational >
Identifier data
Delimiter )
SpDelim ;
Identifier temp
Assign =
Identifier temp
Arithmatic -
Relational >
Identifier next
SpDelim ;
SpDelim }
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function BFS(
Identifier graph
Identifier g
Delimiter )
SpDelim {
INT int
Arithmatic *
Identifier visited
Assign =
Delimiter (
INT int
Arithmatic *
Delimiter )
Function calloc(
Identifier g
Delimiter .
Identifier numberVertices
Delimiter ,
Function sizeof(
INT int
Delimiter )
Delimiter )
SpDelim ;
Identifier queue
Identifier q
SpDelim ;
Function initqueue(
SpecialCharacters &
Identifier q
Delimiter ,
Delimiter (
Identifier g
Delimiter .
Identifier numberVertices
Arithmatic +
Integer 10
Delimiter )
Delimiter )
SpDelim ;
Function printf(
String "%c "
Delimiter ,
Integer 0
Arithmatic +
Delimiter '
Identifier a
Delimiter '
Delimiter )
SpDelim ;
Identifier visited
Delimiter [
Integer 0
Delimiter ]
Assign =
Integer 1
SpDelim ;
Identifier node
Arithmatic *
Identifier temp
Assign =
Identifier g
Delimiter .
Identifier lists
Delimiter [
Integer 0
Delimiter ]
SpDelim ;
Loop while
Delimiter (
Identifier temp
Delimiter )
SpDelim {
Keyword if
Delimiter (
Logical !
Identifier visited
Delimiter [
Identifier temp
Arithmatic -
Relational >
Identifier data
Delimiter ]
Delimiter )
SpDelim {
Function enqueue(
SpecialCharacters &
Identifier q
Delimiter ,
Identifier temp
Delimiter )
SpDelim ;
Identifier visited
Delimiter [
Identifier temp
Arithmatic -
Relational >
Identifier data
Delimiter ]
Assign =
Integer 1
SpDelim ;
SpDelim }
Identifier temp
Assign =
Identifier temp
Arithmatic -
Relational >
Identifier next
SpDelim ;
SpDelim }
Loop while
Delimiter (
Logical !
Function isEmpty(
Identifier q
Delimiter )
Delimiter )
SpDelim {
Identifier node
Arithmatic *
Identifier temp
Assign =
Function Front(
Identifier q
Delimiter )
SpDelim ;
Function dequeue(
SpecialCharacters &
Identifier q
Delimiter )
SpDelim ;
Function printf(
String "%c "
Delimiter ,
Identifier temp
Arithmatic -
Relational >
Identifier data
Arithmatic +
Delimiter '
Identifier a
Delimiter '
Delimiter )
SpDelim ;
Identifier visited
Delimiter [
Identifier temp
Arithmatic -
Relational >
Identifier data
Delimiter ]
Assign =
Integer 1
SpDelim ;
Identifier node
Arithmatic *
Identifier temp2
Assign =
Identifier g
Delimiter .
Identifier lists
Delimiter [
Identifier temp
Arithmatic -
Relational >
Identifier data
Delimiter ]
SpDelim ;
Loop while
Delimiter (
Identifier temp2
Delimiter )
SpDelim {
Keyword if
Delimiter (
Logical !
Identifier visited
Delimiter [
Identifier temp2
Arithmatic -
Relational >
Identifier data
Delimiter ]
Delimiter )
SpDelim {
Function enqueue(
SpecialCharacters &
Identifier q
Delimiter ,
Identifier temp2
Delimiter )
SpDelim ;
Identifier visited
Delimiter [
Identifier temp2
Arithmatic -
Relational >
Identifier data
Delimiter ]
Assign =
Integer 1
SpDelim ;
SpDelim }
Identifier temp2
Assign =
Identifier temp2
Arithmatic -
Relational >
Identifier next
SpDelim ;
SpDelim }
SpDelim }
Function printf(
String "\n"
Delimiter )
SpDelim ;
Keyword return
SpDelim ;
SpDelim }





 Total Tokens = 674