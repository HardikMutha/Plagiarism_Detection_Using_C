Keyword typedef
Keyword struct
Identifier heap
SpDelim {
INT int
Arithmatic *
Identifier arr
SpDelim ;
INT int
Keyword size
SpDelim ;
INT int
Identifier rear
SpDelim ;
SpDelim }
Identifier heap
SpDelim ;
Keyword void
Function init_heap(
Identifier heap
Arithmatic *
Identifier h
Delimiter ,
INT int
Keyword size
Delimiter )
SpDelim {
Identifier h
Arithmatic -
Relational >
Identifier arr
Assign =
Delimiter (
INT int
Arithmatic *
Delimiter )
Function malloc(
Function sizeof(
INT int
Delimiter )
Arithmatic *
Keyword size
Delimiter )
SpDelim ;
Identifier h
Arithmatic -
Relational >
Keyword size
Assign =
Keyword size
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier rear
Assign =
NegativeInteger -1
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
INT int
Function isEmpty(
Identifier heap
Identifier h
Delimiter )
SpDelim {
Keyword if
Delimiter (
Identifier h
Delimiter .
Identifier rear
Relational ==
NegativeInteger -1
Delimiter )
Keyword return
Integer 1
SpDelim ;
Keyword return
Integer 0
SpDelim ;
SpDelim }
INT int
Function parent(
INT int
Identifier index
Delimiter )
SpDelim {
Keyword return
Delimiter (
Delimiter (
Identifier index
Arithmatic -
Integer 1
Delimiter )
Arithmatic /
Integer 2
Delimiter )
SpDelim ;
SpDelim }
Keyword void
Function swap(
Identifier heap
Arithmatic *
Identifier h
Delimiter ,
INT int
Identifier a
Delimiter ,
INT int
Identifier b
Delimiter )
SpDelim {
Keyword if
Delimiter (
Identifier a
Relational >=
Identifier h
Arithmatic -
Relational >
Keyword size
Logical ||
Identifier b
Relational >=
Identifier h
Arithmatic -
Relational >
Keyword size
Logical ||
Identifier a
Relational <
Integer 0
Logical ||
Identifier b
Relational <
Integer 0
Delimiter )
Keyword return
SpDelim ;
INT int
Identifier temp
Assign =
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier a
Delimiter ]
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier a
Delimiter ]
Assign =
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier b
Delimiter ]
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier b
Delimiter ]
Assign =
Identifier temp
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function insert_heap(
Identifier heap
Arithmatic *
Identifier h
Delimiter ,
INT int
Identifier k
Delimiter )
SpDelim {
Identifier h
Arithmatic -
Relational >
Identifier rear
Relational ++
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier h
Arithmatic -
Relational >
Identifier rear
Delimiter ]
Assign =
Identifier k
SpDelim ;
INT int
Identifier i
Assign =
Identifier h
Arithmatic -
Relational >
Identifier rear
SpDelim ;
Loop while
Delimiter (
Identifier i
Relational >
Integer 0
Logical &&
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Relational >
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Function parent(
Identifier i
Delimiter )
Delimiter ]
Delimiter )
SpDelim {
Function swap(
Identifier h
Delimiter ,
Identifier i
Delimiter ,
Function parent(
Identifier i
Delimiter )
Delimiter )
SpDelim ;
Identifier i
Assign =
Function parent(
Identifier i
Delimiter )
SpDelim ;
SpDelim }
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function heapify(
Identifier heap
Arithmatic *
Identifier h
Delimiter )
SpDelim {
INT int
Identifier j
Assign =
Integer 0
SpDelim ;
Loop while
Delimiter (
Identifier j
Relational <=
Identifier h
Arithmatic -
Relational >
Identifier rear
Delimiter )
SpDelim {
INT int
Identifier lchild
Assign =
Integer 2
Arithmatic *
Identifier j
Arithmatic +
Integer 1
SpDelim ;
INT int
Identifier rchild
Assign =
Integer 2
Arithmatic *
Identifier j
Arithmatic +
Integer 2
SpDelim ;
INT int
Identifier largest
Assign =
Identifier j
SpDelim ;
Keyword if
Delimiter (
Identifier lchild
Relational <=
Identifier h
Arithmatic -
Relational >
Identifier rear
Logical &&
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier lchild
Delimiter ]
Relational >
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier largest
Delimiter ]
Delimiter )
Identifier largest
Assign =
Identifier lchild
SpDelim ;
Keyword if
Delimiter (
Identifier rchild
Relational <=
Identifier h
Arithmatic -
Relational >
Identifier rear
Logical &&
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier rchild
Delimiter ]
Relational >
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier largest
Delimiter ]
Delimiter )
Identifier largest
Assign =
Identifier rchild
SpDelim ;
Keyword if
Delimiter (
Identifier largest
Relational !=
Identifier j
Delimiter )
SpDelim {
Function swap(
Identifier h
Delimiter ,
Identifier j
Delimiter ,
Identifier largest
Delimiter )
SpDelim ;
Identifier j
Assign =
Identifier largest
SpDelim ;
SpDelim }
Keyword else
Keyword break
SpDelim ;
SpDelim }
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function print_heap(
Identifier heap
Identifier h
Delimiter )
SpDelim {
Loop for
Delimiter (
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Identifier i
Relational <=
Identifier h
Delimiter .
Identifier rear
SpDelim ;
Identifier i
Relational ++
Delimiter )
SpDelim {
Function printf(
String "%d,"
Delimiter ,
Identifier h
Delimiter .
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Delimiter )
SpDelim ;
SpDelim }
Function printf(
String "\n"
Delimiter )
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function heap_sort(
Identifier heap
Arithmatic *
Identifier h
Delimiter )
SpDelim {
INT int
Identifier rear
Assign =
Identifier h
Arithmatic -
Relational >
Identifier rear
SpDelim ;
Keyword if
Delimiter (
Function isEmpty(
Arithmatic *
Identifier h
Delimiter )
Delimiter )
Keyword return
SpDelim ;
Loop for
Delimiter (
INT int
Identifier i
Assign =
Identifier h
Arithmatic -
Relational >
Identifier rear
SpDelim ;
Identifier i
Relational >=
Integer 0
SpDelim ;
Identifier i
Arithmatic -
Arithmatic -
Delimiter )
SpDelim {
Function swap(
Identifier h
Delimiter ,
Identifier i
Delimiter ,
Integer 0
Delimiter )
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier rear
Arithmatic -
Arithmatic -
SpDelim ;
Identifier h
Arithmatic -
Relational >
Keyword size
Arithmatic -
Arithmatic -
SpDelim ;
Function heapify(
Identifier h
Delimiter )
SpDelim ;
SpDelim }
Identifier h
Arithmatic -
Relational >
Identifier rear
Assign =
Identifier rear
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
INT int
Function main(
INT int
Identifier argc
Delimiter ,
Keyword char
Arithmatic *
Identifier argv
Delimiter []
Delimiter )
SpDelim {
Keyword if
Delimiter (
Identifier argc
Relational !=
Integer 2
Delimiter )
SpDelim {
Function perror(
String "Invalid Usage!\n"
Delimiter )
SpDelim ;
Keyword return
Integer 1
SpDelim ;
SpDelim }
Identifier FILE
Arithmatic *
Identifier file
Assign =
Function fopen(
Identifier argv
Delimiter [
Integer 1
Delimiter ]
Delimiter ,
String "r"
Delimiter )
SpDelim ;
Keyword if
Delimiter (
Identifier file
Relational ==
Constant NULL
Delimiter )
SpDelim {
Function perror(
String "Error Opening File\n"
Delimiter )
SpDelim ;
Keyword return
Integer 1
SpDelim ;
SpDelim }
Identifier heap
Identifier h
SpDelim ;
Function init_heap(
SpecialCharacters &
Identifier h
Delimiter ,
Integer 100
Delimiter )
SpDelim ;
INT int
Identifier d
SpDelim ;
Loop while
Delimiter (
Function fscanf(
Identifier file
Delimiter ,
String "%d"
Delimiter ,
SpecialCharacters &
Identifier d
Delimiter )
Relational !=
Keyword EOF
Delimiter )
Function insert_heap(
SpecialCharacters &
Identifier h
Delimiter ,
Identifier d
Delimiter )
SpDelim ;
Function printf(
String "\nFormed heap : "
Delimiter )
SpDelim ;
Function print_heap(
Identifier h
Delimiter )
SpDelim ;
Function printf(
String "Sorted Heap :"
Delimiter )
SpDelim ;
Function heap_sort(
SpecialCharacters &
Identifier h
Delimiter )
SpDelim ;
Function print_heap(
Identifier h
Delimiter )
SpDelim ;
Function printf(
String "\n"
Delimiter )
SpDelim ;
Function fclose(
Identifier file
Delimiter )
SpDelim ;
Keyword return
Integer 0
SpDelim ;
SpDelim }





 Total Tokens = 633