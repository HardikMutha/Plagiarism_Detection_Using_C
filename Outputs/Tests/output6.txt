Keyword typedef
Keyword struct
Identifier heap
SpDelim {
INT int
Identifier n
SpDelim ;
INT int
Identifier arr
Delimiter [
Identifier MAX
Delimiter ]
SpDelim ;
SpDelim }
Identifier heap
SpDelim ;
Keyword void
Function init_heap(
Identifier heap
Arithmatic *
Identifier h
Delimiter )
SpDelim {
Identifier h
Arithmatic -
Relational >
Identifier n
Assign =
Integer 0
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
INT int
Function min_array(
INT int
Identifier arr
Delimiter []
Delimiter ,
INT int
Identifier a
Delimiter ,
INT int
Identifier b
Delimiter ,
INT int
Identifier c
Delimiter )
SpDelim {
INT int
Identifier x
Assign =
Function MIN(
Identifier arr
Delimiter [
Identifier a
Delimiter ]
Delimiter ,
Identifier arr
Delimiter [
Identifier b
Delimiter ]
Delimiter )
SpDelim ;
INT int
Identifier y
Assign =
Function MIN(
Identifier x
Delimiter ,
Identifier arr
Delimiter [
Identifier c
Delimiter ]
Delimiter )
SpDelim ;
Function if(
Identifier y
Relational ==
Identifier arr
Delimiter [
Identifier a
Delimiter ]
Delimiter )
Keyword return
Identifier a
SpDelim ;
Function if(
Identifier y
Relational ==
Identifier arr
Delimiter [
Identifier b
Delimiter ]
Delimiter )
Keyword return
Identifier b
SpDelim ;
Function if(
Identifier y
Relational ==
Identifier arr
Delimiter [
Identifier c
Delimiter ]
Delimiter )
Keyword return
Identifier c
SpDelim ;
Keyword return
NegativeInteger -1
SpDelim ;
SpDelim }
INT int
Function heap_empty(
Identifier heap
Identifier h
Delimiter )
SpDelim {
Keyword return
Identifier h
Delimiter .
Identifier n
Relational ==
Integer 0
SpDelim ;
SpDelim }
INT int
Function heap_full(
Identifier heap
Identifier h
Delimiter )
SpDelim {
Keyword return
Identifier h
Delimiter .
Identifier n
Relational ==
Identifier MAX
SpDelim ;
SpDelim }
Keyword void
Function swap(
INT int
Arithmatic *
Identifier arr
Delimiter ,
INT int
Identifier a
Delimiter ,
INT int
Identifier b
Delimiter )
SpDelim {
INT int
Identifier temp
Assign =
Identifier arr
Delimiter [
Identifier a
Delimiter ]
SpDelim ;
Identifier arr
Delimiter [
Identifier a
Delimiter ]
Assign =
Identifier arr
Delimiter [
Identifier b
Delimiter ]
SpDelim ;
Identifier arr
Delimiter [
Identifier b
Delimiter ]
Assign =
Identifier temp
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function heap_insert(
Identifier heap
Arithmatic *
Identifier h
Delimiter ,
INT int
Identifier data
Delimiter )
SpDelim {
INT int
Identifier child
Delimiter ,
Identifier parent
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier h
Arithmatic -
Relational >
Identifier n
Delimiter ]
Assign =
Identifier data
SpDelim ;
Identifier child
Assign =
Identifier h
Arithmatic -
Relational >
Identifier n
SpDelim ;
Identifier parent
Assign =
Delimiter (
Identifier child
Arithmatic -
Integer 1
Delimiter )
Arithmatic /
Integer 2
SpDelim ;
Function while(
Identifier child
Relational >
Integer 0
Delimiter )
SpDelim {
Function if(
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier child
Delimiter ]
Relational <
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier parent
Delimiter ]
Delimiter )
SpDelim {
Function swap(
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter ,
Identifier child
Delimiter ,
Identifier parent
Delimiter )
SpDelim ;
Identifier child
Assign =
Identifier parent
SpDelim ;
Identifier parent
Assign =
Delimiter (
Identifier parent
Arithmatic -
Integer 1
Delimiter )
Arithmatic /
Integer 2
SpDelim ;
SpDelim }
Keyword else
Keyword break
SpDelim ;
SpDelim }
Delimiter (
Identifier h
Arithmatic -
Relational >
Identifier n
Delimiter )
Relational ++
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function heap_print(
Identifier heap
Arithmatic *
Identifier h
Delimiter )
SpDelim {
Loop for
Delimiter (
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Identifier i
Relational <
Identifier h
Arithmatic -
Relational >
Identifier n
SpDelim ;
Identifier i
Relational ++
Delimiter )
SpDelim {
Function printf(
String "%d, "
Delimiter ,
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Delimiter )
SpDelim ;
SpDelim }
Function printf(
String "\n"
Delimiter )
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function min_heapify(
Identifier heap
Arithmatic *
Identifier h
Delimiter )
SpDelim {
INT int
Identifier parent
Assign =
Integer 0
SpDelim ;
INT int
Identifier c1
Assign =
Identifier parent
Arithmatic *
Integer 2
Arithmatic +
Integer 1
SpDelim ;
INT int
Identifier c2
Assign =
Identifier parent
Arithmatic *
Integer 2
Arithmatic +
Integer 2
SpDelim ;
Function while(
Identifier c1
Relational <
Identifier h
Arithmatic -
Relational >
Identifier n
Delimiter )
SpDelim {
INT int
Identifier smallest
Assign =
Function min_array(
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter ,
Identifier c1
Delimiter ,
Identifier c2
Delimiter ,
Identifier parent
Delimiter )
SpDelim ;
Function if(
Identifier smallest
Relational ==
Identifier parent
Delimiter )
Keyword break
SpDelim ;
Function swap(
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter ,
Identifier parent
Delimiter ,
Identifier smallest
Delimiter )
SpDelim ;
Identifier parent
Assign =
Identifier smallest
SpDelim ;
Identifier c1
Assign =
Identifier parent
Arithmatic *
Integer 2
Arithmatic +
Integer 1
SpDelim ;
Identifier c2
Assign =
Identifier parent
Arithmatic *
Integer 2
Arithmatic +
Integer 2
SpDelim ;
SpDelim }
Keyword return
SpDelim ;
SpDelim }
INT int
Function heap_remove(
Identifier heap
Arithmatic *
Identifier h
Delimiter )
SpDelim {
INT int
Identifier x
Assign =
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Integer 0
Delimiter ]
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Integer 0
Delimiter ]
Assign =
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier h
Arithmatic -
Relational >
Identifier n
Arithmatic -
Integer 1
Delimiter ]
SpDelim ;
Delimiter (
Identifier h
Arithmatic -
Relational >
Identifier n
Delimiter )
Arithmatic -
Arithmatic -
SpDelim ;
INT int
Identifier parent
Assign =
Integer 0
SpDelim ;
INT int
Identifier lchild
Assign =
Identifier parent
Arithmatic *
Integer 2
Arithmatic +
Integer 1
Delimiter ,
Identifier rchild
Assign =
Identifier parent
Arithmatic *
Integer 2
Arithmatic +
Integer 2
SpDelim ;
Function while(
Identifier lchild
Relational <
Identifier h
Arithmatic -
Relational >
Identifier n
Delimiter )
SpDelim {
INT int
Identifier smallest
Assign =
Function min_array(
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter ,
Identifier lchild
Delimiter ,
Identifier rchild
Delimiter ,
Identifier parent
Delimiter )
SpDelim ;
Function if(
Identifier smallest
Relational ==
Identifier parent
Delimiter )
Keyword break
SpDelim ;
Function swap(
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter ,
Identifier parent
Delimiter ,
Identifier smallest
Delimiter )
SpDelim ;
Identifier parent
Assign =
Identifier smallest
SpDelim ;
Identifier lchild
Assign =
Identifier parent
Arithmatic *
Integer 2
Arithmatic +
Integer 1
SpDelim ;
Identifier rchild
Assign =
Identifier parent
Arithmatic *
Integer 2
Arithmatic +
Integer 2
SpDelim ;
SpDelim }
Keyword return
Identifier x
SpDelim ;
SpDelim }
Keyword void
Function heap_sort(
Identifier heap
Arithmatic *
Identifier h
Delimiter )
SpDelim {
INT int
Identifier n
Assign =
Identifier h
Arithmatic -
Relational >
Identifier n
SpDelim ;
Function while(
Delimiter (
Identifier h
Arithmatic -
Relational >
Identifier n
Delimiter )
Relational >=
Integer 1
Delimiter )
SpDelim {
Function swap(
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter ,
Integer 0
Delimiter ,
Identifier h
Arithmatic -
Relational >
Identifier n
Delimiter )
SpDelim ;
Delimiter (
Identifier h
Arithmatic -
Relational >
Identifier n
Delimiter )
Arithmatic -
Arithmatic -
SpDelim ;
Function min_heapify(
Identifier h
Delimiter )
SpDelim ;
SpDelim }
Identifier h
Arithmatic -
Relational >
Identifier n
Assign =
Identifier n
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
INT int
Function main(
Delimiter )
SpDelim {
INT int
Identifier x
SpDelim ;
Identifier heap
Identifier h
SpDelim ;
Function init_heap(
SpecialCharacters &
Identifier h
Delimiter )
SpDelim ;
Function while(
Function scanf(
String "%d"
Delimiter ,
SpecialCharacters &
Identifier x
Delimiter )
Relational !=
NegativeInteger -1
Delimiter )
SpDelim {
Function heap_insert(
SpecialCharacters &
Identifier h
Delimiter ,
Identifier x
Delimiter )
SpDelim ;
SpDelim }
Function heap_print(
SpecialCharacters &
Identifier h
Delimiter )
SpDelim ;
Function heap_sort(
SpecialCharacters &
Identifier h
Delimiter )
SpDelim ;
Function printf(
String "Sorted: \n"
Delimiter )
SpDelim ;
Function heap_print(
SpecialCharacters &
Identifier h
Delimiter )
SpDelim ;
SpDelim }





 Total Tokens = 690