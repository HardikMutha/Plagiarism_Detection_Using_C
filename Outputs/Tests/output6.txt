Keyword void
Function init(
Identifier heap
Arithmatic *
Identifier l
Delimiter ,
INT int
Keyword size
Delimiter )
SpDelim {
Identifier l
Arithmatic -
Relational >
Identifier a
Assign =
Delimiter (
INT int
Arithmatic *
Delimiter )
Function malloc(
Function sizeof(
INT int
Delimiter )
Arithmatic *
Keyword size
Delimiter )
SpDelim ;
Identifier l
Arithmatic -
Relational >
Keyword size
Assign =
Keyword size
SpDelim ;
Identifier l
Arithmatic -
Relational >
Identifier rear
Assign =
NegativeInteger -1
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function swap(
Identifier heap
Arithmatic *
Identifier l
Delimiter ,
INT int
Identifier a
Delimiter ,
INT int
Identifier b
Delimiter )
SpDelim {
INT int
Identifier temp
Assign =
Identifier l
Arithmatic -
Relational >
Identifier a
Delimiter [
Identifier a
Delimiter ]
SpDelim ;
Identifier l
Arithmatic -
Relational >
Identifier a
Delimiter [
Identifier a
Delimiter ]
Assign =
Identifier l
Arithmatic -
Relational >
Identifier a
Delimiter [
Identifier b
Delimiter ]
SpDelim ;
Identifier l
Arithmatic -
Relational >
Identifier a
Delimiter [
Identifier b
Delimiter ]
Assign =
Identifier temp
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
INT int
Function parent(
INT int
Identifier index
Delimiter )
SpDelim {
Keyword return
Delimiter (
Identifier index
Arithmatic -
Integer 1
Delimiter )
Arithmatic /
Integer 2
SpDelim ;
SpDelim }
Keyword void
Function insert(
Identifier heap
Arithmatic *
Identifier l
Delimiter ,
INT int
Identifier ele
Delimiter )
SpDelim {
Function if(
Identifier l
Arithmatic -
Relational >
Identifier rear
Relational ==
Identifier l
Arithmatic -
Relational >
Keyword size
Arithmatic -
Integer 1
Delimiter )
SpDelim {
Keyword return
SpDelim ;
SpDelim }
Identifier l
Arithmatic -
Relational >
Identifier a
Delimiter [
Relational ++
Identifier l
Arithmatic -
Relational >
Identifier rear
Delimiter ]
Assign =
Identifier ele
SpDelim ;
INT int
Identifier i
Assign =
Identifier l
Arithmatic -
Relational >
Identifier rear
SpDelim ;
Function while(
Identifier i
Relational >
Integer 0
Logical &&
Identifier l
Arithmatic -
Relational >
Identifier a
Delimiter [
Identifier i
Delimiter ]
Relational >
Identifier l
Arithmatic -
Relational >
Identifier a
Delimiter [
Function parent(
Identifier i
Delimiter )
Delimiter ]
Delimiter )
SpDelim {
Function swap(
Identifier l
Delimiter ,
Identifier i
Delimiter ,
Function parent(
Identifier i
Delimiter )
Delimiter )
SpDelim ;
Identifier i
Assign =
Function parent(
Identifier i
Delimiter )
SpDelim ;
SpDelim }
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function display(
Identifier heap
Identifier l
Delimiter )
SpDelim {
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Function while(
Identifier i
Relational <=
Identifier l
Delimiter .
Identifier rear
Delimiter )
SpDelim {
Function printf(
String "%d "
Delimiter ,
Identifier l
Delimiter .
Identifier a
Delimiter [
Identifier i
Relational ++
Delimiter ]
Delimiter )
SpDelim ;
SpDelim }
Function printf(
String "\n"
Delimiter )
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
INT int
Function del(
Identifier heap
Arithmatic *
Identifier l
Delimiter )
SpDelim {
Function swap(
Identifier l
Delimiter ,
Integer 0
Delimiter ,
Identifier l
Arithmatic -
Relational >
Identifier rear
Delimiter )
SpDelim ;
Identifier l
Arithmatic -
Relational >
Identifier rear
Arithmatic -
Arithmatic -
SpDelim ;
INT int
Identifier i
Assign =
Integer 0
Delimiter ,
Identifier j
Assign =
Integer 2
Arithmatic *
Identifier i
Arithmatic +
Integer 1
SpDelim ;
Function while(
Identifier j
Relational <=
Identifier l
Arithmatic -
Relational >
Identifier rear
Delimiter )
SpDelim {
Function if(
Identifier j
Arithmatic +
Integer 1
Relational <=
Identifier l
Arithmatic -
Relational >
Identifier rear
Logical &&
Identifier l
Arithmatic -
Relational >
Identifier a
Delimiter [
Identifier j
Arithmatic +
Integer 1
Delimiter ]
Relational >
Identifier l
Arithmatic -
Relational >
Identifier a
Delimiter [
Identifier j
Delimiter ]
Delimiter )
SpDelim {
Identifier j
Assign =
Identifier j
Arithmatic +
Integer 1
SpDelim ;
SpDelim }
Function if(
Identifier l
Arithmatic -
Relational >
Identifier a
Delimiter [
Identifier i
Delimiter ]
Relational <
Identifier l
Arithmatic -
Relational >
Identifier a
Delimiter [
Identifier j
Delimiter ]
Delimiter )
SpDelim {
Function swap(
Identifier l
Delimiter ,
Identifier i
Delimiter ,
Identifier j
Delimiter )
SpDelim ;
Identifier i
Assign =
Identifier j
SpDelim ;
Identifier j
Assign =
Integer 2
Arithmatic *
Identifier j
Arithmatic +
Integer 1
SpDelim ;
SpDelim }
Keyword else
Keyword break
SpDelim ;
SpDelim }
Keyword return
Identifier l
Arithmatic -
Relational >
Identifier a
Delimiter [
Identifier l
Arithmatic -
Relational >
Identifier rear
Arithmatic +
Integer 1
Delimiter ]
SpDelim ;
SpDelim }
Keyword void
Function heapsort(
Identifier heap
Arithmatic *
Identifier l
Delimiter )
SpDelim {
INT int
Identifier temp
Assign =
Identifier l
Arithmatic -
Relational >
Identifier rear
SpDelim ;
Function while(
Identifier l
Arithmatic -
Relational >
Identifier rear
Relational >=
Integer 0
Delimiter )
SpDelim {
Function del(
Identifier l
Delimiter )
SpDelim ;
SpDelim }
Function for(
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Identifier i
Relational <=
Identifier temp
SpDelim ;
Identifier i
Relational ++
Delimiter )
SpDelim {
Function printf(
String "%d "
Delimiter ,
Identifier l
Arithmatic -
Relational >
Identifier a
Delimiter [
Identifier i
Delimiter ]
Delimiter )
SpDelim ;
SpDelim }
SpDelim }
INT int
Function readline(
INT int
Identifier fd
Delimiter ,
Keyword char
Arithmatic *
Identifier line
Delimiter ,
INT int
Keyword size
Delimiter )
SpDelim {
SpDelim ;
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Keyword char
Identifier ch
SpDelim ;
Function while(
Identifier i
Relational <
Keyword size
Arithmatic -
Integer 1
Logical &&
Function read(
Identifier fd
Delimiter ,
SpecialCharacters &
Identifier ch
Delimiter ,
Integer 1
Delimiter )
Relational ==
Integer 1
Delimiter )
SpDelim {
Function if(
Identifier ch
Relational !=
Delimiter '
Identifier n
Delimiter '
Delimiter )
SpDelim {
Identifier line
Delimiter [
Identifier i
Relational ++
Delimiter ]
Assign =
Identifier ch
SpDelim ;
SpDelim }
Keyword else
Keyword break
SpDelim ;
SpDelim }
Identifier line
Delimiter [
Identifier i
Delimiter ]
Assign =
Delimiter '
Integer 0
Delimiter '
SpDelim ;
Keyword return
Identifier i
SpDelim ;
SpDelim }
INT int
Arithmatic *
Function readfile(
INT int
Identifier fd
Delimiter )
SpDelim {
INT int
Arithmatic *
Identifier arr
Assign =
Delimiter (
INT int
Arithmatic *
Delimiter )
Function malloc(
Function sizeof(
INT int
Delimiter )
Arithmatic *
Integer 1024
Delimiter )
SpDelim ;
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Keyword char
Identifier line
Delimiter [
Integer 256
Delimiter ]
SpDelim ;
Function while(
Function readline(
Identifier fd
Delimiter ,
Identifier line
Delimiter ,
Integer 256
Delimiter )
Relational >
Integer 0
Delimiter )
SpDelim {
Keyword char
Arithmatic *
Identifier token
Assign =
Function strtok(
Identifier line
Delimiter ,
String " "
Delimiter )
SpDelim ;
Function while(
Identifier token
Relational !=
Constant NULL
Delimiter )
SpDelim {
Identifier arr
Delimiter [
Identifier i
Relational ++
Delimiter ]
Assign =
Function atoi(
Identifier token
Delimiter )
SpDelim ;
Identifier token
Assign =
Function strtok(
Constant NULL
Delimiter ,
String " "
Delimiter )
SpDelim ;
SpDelim }
SpDelim }
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Assign =
Constant INT_MIN
SpDelim ;
Keyword return
Identifier arr
SpDelim ;
SpDelim }





 Total Tokens = 611