Keyword char
Arithmatic *
Identifier prompt_names
Delimiter [
Integer 10
Delimiter ]
Assign =
SpDelim {
String "print"
Delimiter ,
String "marks"
Delimiter ,
String "highest"
Delimiter ,
String "avg"
Delimiter ,
String "sgpa"
Delimiter ,
String "add"
Delimiter ,
String "count"
Delimiter ,
String "update"
Delimiter ,
String "stdev"
Delimiter ,
String "topn"
SpDelim }
SpDelim ;
Keyword char
Arithmatic *
Identifier courses_names
Delimiter [
Identifier NUMBER_OF_COURSES
Delimiter ]
Assign =
SpDelim {
String "pspp"
Delimiter ,
String "dsgt"
Delimiter ,
String "dsa"
Delimiter ,
String "os"
Delimiter ,
String "cn"
Delimiter ,
String "ppl"
Delimiter ,
String "toc"
Delimiter ,
String "co"
Delimiter ,
String "compiler"
Delimiter ,
String "maths"
SpDelim }
SpDelim ;
Keyword typedef
Keyword struct
Identifier student
SpDelim {
INT long
Identifier mis
SpDelim ;
Keyword char
Identifier name
Delimiter [
Identifier NAME_SIZE
Delimiter ]
SpDelim ;
INT int
Identifier year_of_admission
SpDelim ;
Keyword struct
Identifier courses
SpDelim {
Keyword char
Identifier subject_name
Delimiter [
Identifier SUBJECT_SIZE
Delimiter ]
SpDelim ;
INT int
Identifier credit
SpDelim ;
FLOAT float
Identifier marks
SpDelim ;
INT unsigned int
Identifier grade
SpDelim ;
INT int
Identifier sem
SpDelim ;
SpDelim }
Identifier courses
SpDelim ;
Keyword struct
Identifier courses
Identifier subjects
Delimiter [
Identifier NUMBER_OF_COURSES
Delimiter ]
SpDelim ;
SpDelim }
Identifier student
SpDelim ;
INT int
Function get_prompt_index(
Keyword char
Arithmatic *
Identifier prompt
Delimiter )
SpDelim ;
INT int
Function readcsv(
Keyword char
Arithmatic *
Identifier file_name
Delimiter ,
Identifier student
Identifier students
Delimiter []
Delimiter ,
INT int
Identifier max_records
Delimiter )
SpDelim ;
INT int
Function readline(
INT int
Identifier file
Delimiter ,
Keyword char
Identifier line
Delimiter []
Delimiter )
SpDelim ;
INT int
Function printcsv(
Identifier student
Identifier students
Delimiter []
Delimiter ,
INT int
Identifier number_of_records
Delimiter )
SpDelim ;
FLOAT float
Function getmarks(
Identifier student
Identifier students
Delimiter []
Delimiter ,
INT int
Identifier number_of_records
Delimiter ,
Keyword char
Arithmatic *
Identifier name
Delimiter ,
Keyword char
Arithmatic *
Identifier subject
Delimiter )
SpDelim ;
INT int
Function get_subject_index(
Keyword char
Arithmatic *
Identifier subject
Delimiter )
SpDelim ;
INT int
Function getstring(
Keyword char
Arithmatic *
Identifier destination
Delimiter )
SpDelim ;
FLOAT float
Function getmaxmarks(
Identifier student
Identifier students
Delimiter []
Delimiter ,
INT int
Identifier number_of_records
Delimiter ,
Keyword char
Arithmatic *
Identifier subject
Delimiter )
SpDelim ;
Keyword void
Function print_name_mis(
Identifier student
Identifier students
Delimiter []
Delimiter ,
INT int
Identifier number_of_records
Delimiter ,
Keyword char
Arithmatic *
Identifier subject
Delimiter ,
FLOAT float
Identifier marks
Delimiter )
SpDelim ;
FLOAT float
Function find_sgpa(
INT long
Identifier MIS
Delimiter ,
INT int
Identifier sem
Delimiter ,
Identifier student
Identifier students
Delimiter []
Delimiter ,
INT int
Identifier number_of_records
Delimiter )
SpDelim ;
INT int
Function append_to_file(
Keyword char
Arithmatic *
Identifier record
Delimiter ,
Keyword char
Arithmatic *
Identifier file_name
Delimiter )
SpDelim ;
INT int
Function write_to_file(
Keyword char
Arithmatic *
Identifier record
Delimiter ,
INT int
Identifier file
Delimiter )
SpDelim ;
Keyword void
Function grade_counter(
Keyword char
Arithmatic *
Identifier subject
Delimiter ,
Identifier student
Identifier students
Delimiter []
Delimiter ,
INT int
Identifier number_of_records
Delimiter )
SpDelim ;
Keyword void
Function rewrite_file(
Keyword char
Arithmatic *
Identifier file_name
Delimiter ,
INT int
Identifier number_of_records
Delimiter ,
INT int
Identifier index
Delimiter ,
Keyword char
Arithmatic *
Identifier record
Delimiter )
SpDelim ;
Keyword void
Function print_record(
Identifier student
Identifier students
Delimiter []
Delimiter ,
INT int
Identifier index
Delimiter )
SpDelim ;
FLOAT float
Function standard_deviation(
Keyword char
Arithmatic *
Identifier subject
Delimiter ,
Identifier student
Identifier students
Delimiter []
Delimiter ,
INT int
Identifier number_of_records
Delimiter )
SpDelim ;
FLOAT float
Function get_cgpa(
INT int
Identifier sno
Delimiter ,
Identifier student
Identifier students
Delimiter []
Delimiter ,
INT int
Identifier number_of_records
Delimiter )
SpDelim ;
Keyword void
Function sort(
FLOAT float
Identifier cgpa
Delimiter []
Delimiter ,
INT int
Identifier student_index
Delimiter []
Delimiter ,
INT int
Identifier number_of_records
Delimiter )
SpDelim ;
Keyword void
Function display_cgpa_tops(
Identifier student
Identifier students
Delimiter []
Delimiter ,
FLOAT float
Identifier cgpa
Delimiter []
Delimiter ,
INT int
Identifier student_index
Delimiter []
Delimiter ,
INT int
Identifier n
Delimiter ,
INT int
Identifier year
Delimiter )
SpDelim ;
INT int
Function get_mis_index(
INT long
Identifier MIS
Delimiter ,
Identifier student
Identifier students
Delimiter []
Delimiter ,
INT int
Identifier number_of_records
Delimiter )
SpDelim ;
INT int
Function main(
INT int
Identifier argc
Delimiter ,
Keyword char
Arithmatic *
Identifier argv
Delimiter []
Delimiter )
SpDelim {
Keyword char
Arithmatic *
Identifier name
Assign =
Constant NULL
SpDelim ;
Keyword char
Arithmatic *
Identifier subject
Assign =
Constant NULL
SpDelim ;
Keyword char
Arithmatic *
Identifier record
Assign =
Constant NULL
SpDelim ;
Keyword char
Arithmatic *
Identifier prompt
Assign =
Function malloc(
Identifier LINE_SIZE
Arithmatic *
Function sizeof(
Keyword char
Delimiter )
Delimiter )
SpDelim ;
Keyword char
Arithmatic *
Identifier command
Assign =
Constant NULL
SpDelim ;
Keyword char
Arithmatic *
Identifier tmp
Assign =
Function malloc(
Identifier LINE_SIZE
Arithmatic *
Function sizeof(
Keyword char
Delimiter )
Delimiter )
SpDelim ;
Keyword char
Identifier line
Delimiter [
Identifier LINE_SIZE
Delimiter ]
SpDelim ;
Identifier student
Identifier students
Delimiter [
Identifier RECORD_SIZE
Delimiter ]
SpDelim ;
INT int
Identifier file
Delimiter ,
Identifier number_of_records
Delimiter ,
Identifier choice
Assign =
Integer 1
SpDelim ;
Keyword if
Delimiter (
Identifier argc
Relational !=
Integer 2
Delimiter )
SpDelim {
Function printf(
String "Provide File Name !\n"
Delimiter )
SpDelim ;
Keyword return
Integer 1
SpDelim ;
SpDelim }
Identifier number_of_records
Assign =
Function readcsv(
Identifier argv
Delimiter [
Integer 1
Delimiter ]
Delimiter ,
Identifier students
Delimiter ,
Identifier RECORD_SIZE
Delimiter )
SpDelim ;
Keyword if
Delimiter (
Identifier number_of_records
Relational ==
Integer 0
Delimiter )
SpDelim {
Function perror(
String "Empty File\n"
Delimiter )
SpDelim ;
Keyword return
Integer 1
SpDelim ;
SpDelim }
Keyword if
Delimiter (
Identifier number_of_records
Relational ==
NegativeInteger -1
Delimiter )
SpDelim {
Function perror(
String "Error opening file\n"
Delimiter )
SpDelim ;
Keyword return
Integer 1
SpDelim ;
SpDelim }
Loop while
Delimiter (
Identifier choice
Relational >
Integer 0
Logical &&
Identifier choice
Relational <
Integer 11
Delimiter )
SpDelim {
Function printf(
String "1.)print : print the array of structures\n"
String "2.)marks <name>  : display the marks of student whose name is given in <name>\n"
String "3.)highest <subject> : show name,MISID of all students with highest marks in the given subject\n"
String "4.)avg <subject> : show average marks in a given subject\n"
String "5.)sgpa <misid> <sem> : show sgpa of studedent given by <misid> in the semster given by <sem>, both being numbers\n"
String "6.)add "
String "mis,name,year-of-admission,subject1,credit1,marks1,grade1,sem1,subject2,credit2,marks2,grade2,sem2,subject3,credit3,"
String "marks3,grade3,sem3,subject4,credit4,marks4,grade4,sem4,subject5,credit5,marks5,grade5,sem5,subject6,credit6,marks6,"
String "grade6,sem6,subject7,credit7,marks7,grade7,sem7,subject8,credit8,marks8,grade8,sem8,subject9,credit9,marks9,grade9,"
String "sem9,subject10,credit10,marks10,grade10,sem10  : add entries where data is specified as a comma separated list\n"
String "7.)count <subject> : Print the count of number of students with each grade in a given course\n"
String "8.)update <misid> <field> <new-value> : update the entry of student with MISID in <misid>, for the column specified "
String "by <cfield> with the new value given in <new-value>\n"
String "9.)stdev <course> : find standard deviation of marks in a given subject\n"
String "10.)topn <n> <year-of-admission> :  list top <n> students in class given by <year-of-admission> based on CGPA.\n"
Delimiter )
SpDelim ;
Function printf(
String "Enter Prompt: \n"
Delimiter )
SpDelim ;
Function getstring(
Identifier prompt
Delimiter )
SpDelim ;
Function strcpy(
Identifier tmp
Delimiter ,
Identifier prompt
Delimiter )
SpDelim ;
Identifier choice
Assign =
Function get_prompt_index(
Identifier tmp
Delimiter )
SpDelim ;
Keyword switch
Delimiter (
Identifier choice
Delimiter )
SpDelim {
Keyword case
Integer 1
Function printcsv(
Identifier students
Delimiter ,
Identifier number_of_records
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
Keyword case
Integer 2
SpDelim {
FLOAT float
Identifier mk
SpDelim ;
Identifier name
Assign =
Function malloc(
Identifier NAME_SIZE
Delimiter )
SpDelim ;
Identifier subject
Assign =
Function malloc(
Identifier SUBJECT_SIZE
Delimiter )
SpDelim ;
Keyword char
Arithmatic *
Identifier temp
Assign =
Constant NULL
SpDelim ;
Function strtok(
Identifier prompt
Delimiter ,
String " "
Delimiter )
SpDelim ;
Function while(
Delimiter (
Identifier temp
Assign =
Function strtok(
Constant NULL
Delimiter ,
String " "
Delimiter )
Delimiter )
Logical &&
Function get_subject_index(
Identifier temp
Delimiter )
Relational ==
NegativeInteger -1
Delimiter )
SpDelim {
Function strcat(
Identifier name
Delimiter ,
Identifier temp
Delimiter )
SpDelim ;
Function strcat(
Identifier name
Delimiter ,
String " "
Delimiter )
SpDelim ;
SpDelim }
Identifier name
Delimiter [
Function strlen(
Identifier name
Delimiter )
Arithmatic -
Integer 1
Delimiter ]
Assign =
Delimiter '
Integer 0
Delimiter '
SpDelim ;
Keyword if
Delimiter (
Identifier name
Relational ==
Constant NULL
Logical ||
Identifier subject
Relational ==
Constant NULL
Logical ||
Identifier temp
Relational ==
Constant NULL
Delimiter )
SpDelim {
Function printf(
String "An Error has Occured"
Delimiter )
SpDelim ;
Function free(
Identifier name
Delimiter )
SpDelim ;
Function free(
Identifier subject
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Function strcpy(
Identifier subject
Delimiter ,
Identifier temp
Delimiter )
SpDelim ;
Identifier mk
Assign =
Function getmarks(
Identifier students
Delimiter ,
Identifier number_of_records
Delimiter ,
Identifier name
Delimiter ,
Identifier subject
Delimiter )
SpDelim ;
Keyword if
Delimiter (
Identifier mk
Relational !=
NegativeInteger -1
Delimiter )
Function printf(
String "Marks = %.2f\n"
Delimiter ,
Identifier mk
Delimiter )
SpDelim ;
Keyword else
SpDelim {
Function printf(
String "No such record Exists!\n"
Delimiter )
SpDelim ;
Function free(
Identifier name
Delimiter )
SpDelim ;
Function free(
Identifier subject
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Function free(
Identifier name
Delimiter )
SpDelim ;
Function free(
Identifier subject
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Keyword case
Integer 3
SpDelim {
FLOAT float
Identifier max_marks
SpDelim ;
Function strtok(
Identifier prompt
Delimiter ,
String " "
Delimiter )
SpDelim ;
Identifier subject
Assign =
Function strtok(
Constant NULL
Delimiter ,
String " "
Delimiter )
SpDelim ;
Function if(
Identifier subject
Relational ==
Constant NULL
Delimiter )
SpDelim {
Function printf(
String "Provide Subject Name !\n"
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Identifier max_marks
Assign =
Function getmaxmarks(
Identifier students
Delimiter ,
Identifier number_of_records
Delimiter ,
Identifier subject
Delimiter )
SpDelim ;
Keyword if
Delimiter (
Identifier max_marks
Relational ==
NegativeInteger -1
Delimiter )
SpDelim {
Function printf(
String "No such record found !\n"
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Function print_name_mis(
Identifier students
Delimiter ,
Identifier number_of_records
Delimiter ,
Identifier subject
Delimiter ,
Identifier max_marks
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Keyword case
Integer 4
SpDelim {
FLOAT float
Identifier avg
SpDelim ;
Function strtok(
Identifier prompt
Delimiter ,
String " "
Delimiter )
SpDelim ;
Identifier subject
Assign =
Function strtok(
Constant NULL
Delimiter ,
String " "
Delimiter )
SpDelim ;
Function if(
Identifier subject
Relational ==
Constant NULL
Delimiter )
SpDelim {
Function printf(
String "Enter a Valid Subject !\n"
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Identifier avg
Assign =
Function getmarks(
Identifier students
Delimiter ,
Identifier number_of_records
Delimiter ,
Constant NULL
Delimiter ,
Identifier subject
Delimiter )
SpDelim ;
Keyword if
Delimiter (
Identifier avg
Relational ==
NegativeInteger -1
Delimiter )
SpDelim {
Function printf(
String "No such record exists!\n"
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Function printf(
String "Average Marks for %s = %.2f\n"
Delimiter ,
Identifier subject
Delimiter ,
Identifier avg
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Keyword case
Integer 5
SpDelim {
INT long
Identifier MIS
Assign =
Integer 0
SpDelim ;
INT int
Identifier sem
Assign =
Integer 0
SpDelim ;
FLOAT float
Identifier SGPA
SpDelim ;
Function strtok(
Identifier prompt
Delimiter ,
String " "
Delimiter )
SpDelim ;
Keyword char
Arithmatic *
Identifier temp
Assign =
Function strtok(
Constant NULL
Delimiter ,
String " "
Delimiter )
SpDelim ;
Function if(
Identifier temp
Relational ==
Constant NULL
Delimiter )
SpDelim {
Function printf(
String "Enter a valid MIS - ID\n"
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Identifier MIS
Assign =
Function atol(
Identifier temp
Delimiter )
SpDelim ;
Identifier temp
Assign =
Function strtok(
Constant NULL
Delimiter ,
String " "
Delimiter )
SpDelim ;
Function if(
Identifier temp
Relational ==
Constant NULL
Delimiter )
SpDelim {
Function printf(
String "Enter a valid MIS - ID\n"
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Identifier sem
Assign =
Function atoi(
Identifier temp
Delimiter )
SpDelim ;
Identifier SGPA
Assign =
Function find_sgpa(
Identifier MIS
Delimiter ,
Identifier sem
Delimiter ,
Identifier students
Delimiter ,
Identifier number_of_records
Delimiter )
SpDelim ;
Keyword if
Delimiter (
Identifier SGPA
Relational ==
NegativeInteger -1
Delimiter )
SpDelim {
Function printf(
String "No Such Record exists!\n"
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Function printf(
String "SGPA in sem %i = %.2f\n"
Delimiter ,
Identifier sem
Delimiter ,
Identifier SGPA
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Keyword case
Integer 6
SpDelim {
Identifier file
Assign =
Function open(
Identifier argv
Delimiter [
Integer 1
Delimiter ]
Delimiter ,
Constant O_APPEND
Delimiter )
SpDelim ;
Keyword if
Delimiter (
Identifier record
Relational ==
Constant NULL
Delimiter )
SpDelim {
Function perror(
String "An error was occured\n"
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Function strtok(
Identifier prompt
Delimiter ,
String " "
Delimiter )
SpDelim ;
Identifier record
Assign =
Function strtok(
Constant NULL
Delimiter ,
String " "
Delimiter )
SpDelim ;
Function if(
Identifier record
Relational ==
Constant NULL
Delimiter )
SpDelim {
Function printf(
String "Enter a record !\n"
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Identifier number_of_records
Arithmatic +
Assign =
Integer 1
SpDelim ;
Keyword if
Delimiter (
Logical !
Function append_to_file(
Identifier record
Delimiter ,
Identifier argv
Delimiter [
Integer 1
Delimiter ]
Delimiter )
Delimiter )
SpDelim {
Function perror(
String "Error in Writing File: \n"
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Identifier number_of_records
Assign =
Function readcsv(
Identifier argv
Delimiter [
Integer 1
Delimiter ]
Delimiter ,
Identifier students
Delimiter ,
Identifier RECORD_SIZE
Delimiter )
SpDelim ;
Function close(
Identifier file
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Keyword case
Integer 7
SpDelim {
Function strtok(
Identifier prompt
Delimiter ,
String " "
Delimiter )
SpDelim ;
Identifier subject
Assign =
Function strtok(
Constant NULL
Delimiter ,
String " "
Delimiter )
SpDelim ;
Function grade_counter(
Identifier subject
Delimiter ,
Identifier students
Delimiter ,
Identifier number_of_records
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Keyword case
Integer 8
SpDelim {
INT long
Identifier MIS
Assign =
Integer 0
SpDelim ;
INT int
Identifier index
SpDelim ;
Keyword char
Arithmatic *
Identifier field
Assign =
Function malloc(
Integer 24
Delimiter )
SpDelim ;
Keyword char
Arithmatic *
Identifier temp
Assign =
Constant NULL
SpDelim ;
Function strtok(
Identifier prompt
Delimiter ,
String " "
Delimiter )
SpDelim ;
Identifier temp
Assign =
Function strtok(
Constant NULL
Delimiter ,
String " "
Delimiter )
SpDelim ;
Identifier MIS
Assign =
Function atol(
Identifier temp
Delimiter )
SpDelim ;
Identifier index
Assign =
Function get_mis_index(
Identifier MIS
Delimiter ,
Identifier students
Delimiter ,
Identifier number_of_records
Delimiter )
SpDelim ;
Keyword if
Delimiter (
Identifier index
Relational ==
NegativeInteger -1
Delimiter )
SpDelim {
Function printf(
String "Enter a valid MIS ID:\n"
Delimiter )
SpDelim ;
Function free(
Identifier record
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Identifier temp
Assign =
Function strtok(
Constant NULL
Delimiter ,
String " "
Delimiter )
SpDelim ;
Function strcpy(
Identifier field
Delimiter ,
Identifier temp
Delimiter )
SpDelim ;
Function if(
Function strcmp(
Identifier field
Delimiter ,
String "name"
Delimiter )
Relational ==
Integer 0
Delimiter )
SpDelim {
Identifier temp
Assign =
Function strtok(
Constant NULL
Delimiter ,
String " "
Delimiter )
SpDelim ;
Function strcpy(
Identifier students
Delimiter [
Identifier index
Delimiter ]
Delimiter .
Identifier name
Delimiter ,
Identifier temp
Delimiter )
SpDelim ;
SpDelim }
Keyword else
Keyword if
Delimiter (
Function strcmp(
Identifier field
Delimiter ,
String "mis"
Delimiter )
Relational ==
Integer 0
Delimiter )
SpDelim {
Identifier temp
Assign =
Function strtok(
Constant NULL
Delimiter ,
String " "
Delimiter )
SpDelim ;
Identifier students
Delimiter [
Identifier index
Delimiter ]
Delimiter .
Identifier mis
Assign =
Function atol(
Identifier temp
Delimiter )
SpDelim ;
SpDelim }
Keyword else
Keyword if
Delimiter (
Function strcmp(
Identifier field
Delimiter ,
String "year-of-admission"
Delimiter )
Relational ==
Integer 0
Delimiter )
SpDelim {
Identifier temp
Assign =
Function strtok(
Constant NULL
Delimiter ,
String " "
Delimiter )
SpDelim ;
Identifier students
Delimiter [
Identifier index
Delimiter ]
Delimiter .
Identifier year_of_admission
Assign =
Function atoi(
Identifier temp
Delimiter )
SpDelim ;
SpDelim }
Function rewrite_file(
Identifier argv
Delimiter [
Integer 1
Delimiter ]
Delimiter ,
Identifier number_of_records
Delimiter ,
Identifier index
Arithmatic -
Integer 1
Delimiter ,
Identifier record
Delimiter )
SpDelim ;
Identifier number_of_records
Assign =
Function readcsv(
Identifier argv
Delimiter [
Integer 1
Delimiter ]
Delimiter ,
Identifier students
Delimiter ,
Identifier number_of_records
Delimiter )
SpDelim ;
Function free(
Identifier record
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Keyword case
Integer 9
SpDelim {
FLOAT float
Identifier stdev
SpDelim ;
Function strtok(
Identifier prompt
Delimiter ,
String " "
Delimiter )
SpDelim ;
Function if(
Delimiter (
Identifier subject
Assign =
Function strtok(
Constant NULL
Delimiter ,
String ""
Delimiter )
Delimiter )
Relational ==
Constant NULL
Delimiter )
SpDelim {
Function printf(
String "Enter a Subject !\n"
Delimiter )
SpDelim ;
Function free(
Identifier subject
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Identifier stdev
Assign =
Function standard_deviation(
Identifier subject
Delimiter ,
Identifier students
Delimiter ,
Identifier number_of_records
Delimiter )
SpDelim ;
Keyword if
Delimiter (
Identifier stdev
Relational ==
NegativeFraction -1.0
Delimiter )
SpDelim {
Function printf(
String "No Such record Exists!\n"
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Function printf(
String "Standard Deviation for %s = %f\n"
Delimiter ,
Identifier subject
Delimiter ,
Identifier stdev
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Keyword case
Integer 10
SpDelim {
FLOAT float
Identifier cgpa
Delimiter [
Identifier number_of_records
Delimiter ]
SpDelim ;
INT int
Identifier student_index
Delimiter [
Identifier number_of_records
Delimiter ]
SpDelim ;
INT int
Identifier n
Assign =
Integer 0
SpDelim ;
INT int
Identifier year
Assign =
Integer 0
SpDelim ;
Function strtok(
Identifier prompt
Delimiter ,
String " "
Delimiter )
SpDelim ;
Keyword char
Arithmatic *
Identifier temp
Assign =
Function strtok(
Constant NULL
Delimiter ,
String " "
Delimiter )
SpDelim ;
Function if(
Identifier temp
Relational ==
Constant NULL
Delimiter )
SpDelim {
Function printf(
String "Enter an MS ID and Y.o.A\n"
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Identifier n
Assign =
Function atoi(
Identifier temp
Delimiter )
SpDelim ;
Identifier temp
Assign =
Function strtok(
Constant NULL
Delimiter ,
String " "
Delimiter )
SpDelim ;
Function if(
Identifier temp
Relational ==
Constant NULL
Delimiter )
SpDelim {
Function printf(
String "Enter Y.o.A\n"
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Identifier year
Assign =
Function atoi(
Identifier temp
Delimiter )
SpDelim ;
Keyword if
Delimiter (
Identifier n
Relational >
Identifier number_of_records
Delimiter )
SpDelim {
Function printf(
String "Not enough Records!\n"
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Loop for
Delimiter (
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Identifier i
Relational <
Identifier number_of_records
SpDelim ;
Identifier i
Relational ++
Delimiter )
Identifier student_index
Delimiter [
Identifier i
Delimiter ]
Assign =
Identifier i
SpDelim ;
Loop for
Delimiter (
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Identifier i
Relational <
Identifier number_of_records
SpDelim ;
Identifier i
Relational ++
Delimiter )
Identifier cgpa
Delimiter [
Identifier i
Delimiter ]
Assign =
Function get_cgpa(
Identifier i
Delimiter ,
Identifier students
Delimiter ,
Identifier number_of_records
Delimiter )
SpDelim ;
Function sort(
Identifier cgpa
Delimiter ,
Identifier student_index
Delimiter ,
Identifier number_of_records
Delimiter )
SpDelim ;
Function display_cgpa_tops(
Identifier students
Delimiter ,
Identifier cgpa
Delimiter ,
Identifier student_index
Delimiter ,
Identifier n
Delimiter ,
Identifier year
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Identifier default
Function printf(
String "Enter a valid option\n"
Delimiter )
SpDelim ;
Keyword break
SpDelim ;
SpDelim }
Function printf(
String "*********************************************************************************************************\n"
Delimiter )
SpDelim ;
SpDelim }
Function free(
Identifier prompt
Delimiter )
SpDelim ;
Function free(
Identifier tmp
Delimiter )
SpDelim ;
Function close(
Identifier file
Delimiter )
SpDelim ;
Keyword return
Integer 0
SpDelim ;
SpDelim }
Keyword void
Function rewrite_file(
Keyword char
Arithmatic *
Identifier file_name
Delimiter ,
INT int
Identifier number_of_records
Delimiter ,
INT int
Identifier index
Delimiter ,
Keyword char
Arithmatic *
Identifier record
Delimiter )
SpDelim {
SpDelim }
INT int
Function printcsv(
Identifier student
Identifier students
Delimiter []
Delimiter ,
INT int
Identifier number_of_records
Delimiter )
SpDelim {
INT int
Identifier i
SpDelim ;
Loop for
Delimiter (
Identifier i
Assign =
Integer 0
SpDelim ;
Identifier i
Relational <
Identifier number_of_records
SpDelim ;
Identifier i
Relational ++
Delimiter )
SpDelim {
Function printf(
String "%ld %s %d "
Delimiter ,
Identifier students
Delimiter [
Identifier i
Delimiter ]
Delimiter .
Identifier mis
Delimiter ,
Identifier students
Delimiter [
Identifier i
Delimiter ]
Delimiter .
Identifier name
Delimiter ,
Identifier students
Delimiter [
Identifier i
Delimiter ]
Delimiter .
Identifier year_of_admission
Delimiter )
SpDelim ;
Loop for
Delimiter (
INT int
Identifier j
Assign =
Integer 0
SpDelim ;
Identifier j
Relational <
Identifier NUMBER_OF_COURSES
SpDelim ;
Identifier j
Relational ++
Delimiter )
Function printf(
String "%s %d %.2lf %u %d "
Delimiter ,
Identifier students
Delimiter [
Identifier i
Delimiter ]
Delimiter .
Identifier subjects
Delimiter [
Identifier j
Delimiter ]
Delimiter .
Identifier subject_name
Delimiter ,
Identifier students
Delimiter [
Identifier i
Delimiter ]
Delimiter .
Identifier subjects
Delimiter [
Identifier j
Delimiter ]
Delimiter .
Identifier credit
Delimiter ,
Identifier students
Delimiter [
Identifier i
Delimiter ]
Delimiter .
Identifier subjects
Delimiter [
Identifier j
Delimiter ]
Delimiter .
Identifier marks
Delimiter ,
Identifier students
Delimiter [
Identifier i
Delimiter ]
Delimiter .
Identifier subjects
Delimiter [
Identifier j
Delimiter ]
Delimiter .
Identifier grade
Delimiter ,
Identifier students
Delimiter [
Identifier i
Delimiter ]
Delimiter .
Identifier subjects
Delimiter [
Identifier j
Delimiter ]
Delimiter .
Identifier sem
Delimiter )
SpDelim ;
Function printf(
String "\n"
Delimiter )
SpDelim ;
SpDelim }
Keyword return
Identifier i
SpDelim ;
SpDelim }
INT int
Function get_prompt_index(
Keyword char
Arithmatic *
Identifier prompt
Delimiter )
SpDelim {
Loop for
Delimiter (
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Identifier i
Relational <
Integer 11
SpDelim ;
Identifier i
Relational ++
Delimiter )
SpDelim {
Keyword if
Delimiter (
Function strcmp(
Identifier prompt_names
Delimiter [
Identifier i
Delimiter ]
Delimiter ,
Function strtok(
Identifier prompt
Delimiter ,
String " "
Delimiter )
Delimiter )
Relational ==
Integer 0
Delimiter )
Keyword return
Delimiter (
Identifier i
Arithmatic +
Integer 1
Delimiter )
SpDelim ;
SpDelim }
Keyword return
NegativeInteger -1
SpDelim ;
SpDelim }





 Total Tokens = 1809