Keyword void
Function init(
Identifier Heap
Arithmatic *
Identifier h
Delimiter ,
INT int
Keyword size
Delimiter )
SpDelim {
Function if(
Keyword size
Relational <=
Integer 0
Delimiter )
SpDelim {
Keyword return
SpDelim ;
SpDelim }
Identifier h
Arithmatic -
Relational >
Keyword size
Assign =
Keyword size
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Assign =
Delimiter (
INT int
Arithmatic *
Delimiter )
Function malloc(
Function sizeof(
INT int
Delimiter )
Arithmatic *
Keyword size
Delimiter )
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier rear
Assign =
NegativeInteger -1
SpDelim ;
Function for(
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Identifier i
Relational <
Identifier h
Arithmatic -
Relational >
Keyword size
SpDelim ;
Identifier i
Relational ++
Delimiter )
SpDelim {
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Assign =
Constant INT_MIN
SpDelim ;
SpDelim }
SpDelim }
INT int
Function getIndex(
Identifier Heap
Identifier h
Delimiter ,
INT int
Identifier i
Delimiter )
SpDelim {
Function if(
Identifier i
Relational ==
Integer 0
Delimiter )
SpDelim {
Keyword return
Integer 0
SpDelim ;
SpDelim }
Keyword return
Delimiter (
Identifier i
Arithmatic -
Integer 1
Delimiter )
Arithmatic /
Integer 2
SpDelim ;
SpDelim }
Keyword void
Function insertion(
Identifier Heap
Arithmatic *
Identifier h
Delimiter ,
INT int
Identifier data
Delimiter )
SpDelim {
Function if(
Identifier h
Arithmatic -
Relational >
Identifier rear
Relational >=
Identifier h
Arithmatic -
Relational >
Keyword size
Arithmatic -
Integer 1
Delimiter )
SpDelim {
Keyword return
SpDelim ;
SpDelim }
Identifier h
Arithmatic -
Relational >
Identifier rear
Relational ++
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier h
Arithmatic -
Relational >
Identifier rear
Delimiter ]
Assign =
Identifier data
SpDelim ;
INT int
Identifier i
Assign =
Identifier h
Arithmatic -
Relational >
Identifier rear
Delimiter ,
Identifier j
SpDelim ;
Function while(
Identifier i
Relational >
Integer 0
Delimiter )
SpDelim {
Identifier j
Assign =
Function getIndex(
Arithmatic *
Identifier h
Delimiter ,
Identifier i
Delimiter )
SpDelim ;
Function if(
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Relational >
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier j
Delimiter ]
Delimiter )
SpDelim {
INT int
Identifier temp
Assign =
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Assign =
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier j
Delimiter ]
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier j
Delimiter ]
Assign =
Identifier temp
SpDelim ;
Identifier i
Assign =
Identifier j
SpDelim ;
SpDelim }
Keyword else
SpDelim {
Keyword break
SpDelim ;
SpDelim }
SpDelim }
SpDelim }
Keyword void
Function heapify(
Identifier Heap
Arithmatic *
Identifier h
Delimiter ,
INT int
Identifier i
Delimiter )
SpDelim {
INT int
Identifier max
Assign =
Identifier i
SpDelim ;
INT int
Identifier l
Assign =
Integer 2
Arithmatic *
Identifier i
Arithmatic +
Integer 1
SpDelim ;
INT int
Identifier r
Assign =
Integer 2
Arithmatic *
Identifier i
Arithmatic +
Integer 2
SpDelim ;
Function if(
Identifier l
Relational <=
Identifier h
Arithmatic -
Relational >
Identifier rear
Logical &&
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier l
Delimiter ]
Relational >
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier max
Delimiter ]
Delimiter )
SpDelim {
Identifier max
Assign =
Identifier l
SpDelim ;
SpDelim }
Function if(
Identifier r
Relational <=
Identifier h
Arithmatic -
Relational >
Identifier rear
Logical &&
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier r
Delimiter ]
Relational >
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier max
Delimiter ]
Delimiter )
SpDelim {
Identifier max
Assign =
Identifier r
SpDelim ;
SpDelim }
Function if(
Identifier max
Relational !=
Identifier i
Delimiter )
SpDelim {
INT int
Identifier temp
Assign =
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Assign =
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier max
Delimiter ]
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier max
Delimiter ]
Assign =
Identifier temp
SpDelim ;
Function heapify(
Identifier h
Delimiter ,
Identifier max
Delimiter )
SpDelim ;
SpDelim }
SpDelim }
Keyword void
Function heapSort(
Identifier Heap
Arithmatic *
Identifier h
Delimiter )
SpDelim {
Function if(
Identifier h
Arithmatic -
Relational >
Identifier rear
Relational ==
NegativeInteger -1
Delimiter )
SpDelim {
Keyword return
SpDelim ;
SpDelim }
INT int
Identifier temprear
Assign =
Identifier h
Arithmatic -
Relational >
Identifier rear
SpDelim ;
Function for(
INT int
Identifier i
Assign =
Identifier h
Arithmatic -
Relational >
Identifier rear
Arithmatic /
Integer 2
SpDelim ;
Identifier i
Relational >=
Integer 0
SpDelim ;
Identifier i
Arithmatic -
Arithmatic -
Delimiter )
SpDelim {
Function heapify(
Identifier h
Delimiter ,
Identifier i
Delimiter )
SpDelim ;
SpDelim }
Function for(
INT int
Identifier i
Assign =
Identifier h
Arithmatic -
Relational >
Identifier rear
SpDelim ;
Identifier i
Relational >
Integer 0
SpDelim ;
Identifier i
Arithmatic -
Arithmatic -
Delimiter )
SpDelim {
INT int
Identifier temp
Assign =
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Integer 0
Delimiter ]
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Integer 0
Delimiter ]
Assign =
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Assign =
Identifier temp
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier rear
Arithmatic -
Arithmatic -
SpDelim ;
Function heapify(
Identifier h
Delimiter ,
Integer 0
Delimiter )
SpDelim ;
SpDelim }
Identifier h
Arithmatic -
Relational >
Identifier rear
Assign =
Identifier temprear
SpDelim ;
SpDelim }
INT int
Function remove_element(
Identifier Heap
Arithmatic *
Identifier h
Delimiter )
SpDelim {
Function if(
Identifier h
Arithmatic -
Relational >
Identifier rear
Relational ==
NegativeInteger -1
Delimiter )
SpDelim {
Keyword return
Constant INT_MIN
SpDelim ;
SpDelim }
INT int
Identifier temp
Assign =
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Integer 0
Delimiter ]
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Integer 0
Delimiter ]
Assign =
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier h
Arithmatic -
Relational >
Identifier rear
Delimiter ]
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier rear
Arithmatic -
Arithmatic -
SpDelim ;
INT int
Identifier i
Assign =
Integer 0
Delimiter ,
Identifier j
Assign =
Integer 0
Delimiter ,
Identifier k
Assign =
Integer 0
SpDelim ;
Function while(
Identifier j
Relational <=
Identifier h
Arithmatic -
Relational >
Identifier rear
Logical &&
Identifier k
Relational <=
Identifier h
Arithmatic -
Relational >
Identifier rear
Delimiter )
SpDelim {
Identifier j
Assign =
Integer 2
Arithmatic *
Identifier i
Arithmatic +
Integer 1
SpDelim ;
Identifier k
Assign =
Integer 2
Arithmatic *
Identifier i
Arithmatic +
Integer 2
SpDelim ;
Function if(
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier j
Delimiter ]
Relational >
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier k
Delimiter ]
Delimiter )
SpDelim {
Function if(
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier j
Delimiter ]
Relational >
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Delimiter )
SpDelim {
INT int
Identifier temp
Assign =
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Assign =
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier j
Delimiter ]
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier j
Delimiter ]
Assign =
Identifier temp
SpDelim ;
Identifier i
Assign =
Identifier j
SpDelim ;
SpDelim }
Keyword else
SpDelim {
Keyword return
Identifier temp
SpDelim ;
SpDelim }
SpDelim }
Keyword else
SpDelim {
Function if(
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier k
Delimiter ]
Relational >
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Delimiter )
SpDelim {
INT int
Identifier temp
Assign =
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Assign =
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier k
Delimiter ]
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier k
Delimiter ]
Assign =
Identifier temp
SpDelim ;
Identifier i
Assign =
Identifier k
SpDelim ;
SpDelim }
Keyword else
SpDelim {
Keyword return
Identifier temp
SpDelim ;
SpDelim }
SpDelim }
SpDelim }
Keyword return
Identifier temp
SpDelim ;
SpDelim }
Keyword void
Function printHeap(
Identifier Heap
Identifier h
Delimiter )
SpDelim {
Function for(
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Identifier i
Relational <=
Identifier h
Delimiter .
Identifier rear
SpDelim ;
Identifier i
Relational ++
Delimiter )
SpDelim {
Function printf(
String "%d "
Delimiter ,
Identifier h
Delimiter .
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Delimiter )
SpDelim ;
SpDelim }
Function printf(
String "\n"
Delimiter )
SpDelim ;
SpDelim }
Keyword void
Function deleteHeap(
Identifier Heap
Arithmatic *
Identifier h
Delimiter )
SpDelim {
Identifier h
Arithmatic -
Relational >
Keyword size
Assign =
Integer 0
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier rear
Assign =
NegativeInteger -1
SpDelim ;
Function free(
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter )
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Assign =
Constant NULL
SpDelim ;
SpDelim }





 Total Tokens = 857