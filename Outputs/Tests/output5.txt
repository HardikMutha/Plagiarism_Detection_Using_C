Keyword void
Function swap(
INT int
Arithmatic *
Identifier a
Delimiter ,
INT int
Arithmatic *
Identifier b
Delimiter )
SpDelim {
INT int
Identifier temp
Assign =
Arithmatic *
Identifier a
SpDelim ;
Arithmatic *
Identifier a
Assign =
Arithmatic *
Identifier b
SpDelim ;
Arithmatic *
Identifier b
Assign =
Identifier temp
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function initHeap(
Identifier minHeap
Arithmatic *
Identifier h
Delimiter ,
INT int
Keyword size
Delimiter )
SpDelim {
Function if(
Keyword size
Relational <=
Integer 0
Delimiter )
Keyword return
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Assign =
Delimiter (
INT int
Arithmatic *
Delimiter )
Function calloc(
Keyword size
Delimiter ,
Function sizeof(
INT int
Delimiter )
Delimiter )
SpDelim ;
Function if(
Identifier h
Arithmatic -
Relational >
Identifier arr
Relational ==
Constant NULL
Delimiter )
Keyword return
SpDelim ;
Identifier h
Arithmatic -
Relational >
Keyword size
Assign =
Keyword size
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier rear
Assign =
Integer 0
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
INT int
Function getParent(
INT int
Identifier i
Delimiter )
SpDelim {
Function if(
Identifier i
Relational ==
Integer 0
Delimiter )
Keyword return
NegativeInteger -1
SpDelim ;
Keyword else
Function if(
Identifier i
SpecialCharacters %
Integer 2
Relational ==
Integer 1
Delimiter )
Keyword return
Delimiter (
Identifier i
Arithmatic -
Integer 1
Delimiter )
Arithmatic /
Integer 2
SpDelim ;
Keyword else
Keyword return
Delimiter (
Identifier i
Arithmatic -
Integer 2
Delimiter )
Arithmatic /
Integer 2
SpDelim ;
SpDelim }
Keyword void
Function insert(
Identifier minHeap
Arithmatic *
Identifier h
Delimiter ,
INT int
Identifier data
Delimiter )
SpDelim {
Function if(
Identifier h
Arithmatic -
Relational >
Identifier rear
Relational >=
Identifier h
Arithmatic -
Relational >
Keyword size
Delimiter )
Keyword return
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier h
Arithmatic -
Relational >
Identifier rear
Relational ++
Delimiter ]
Assign =
Identifier data
SpDelim ;
INT int
Identifier i
Assign =
Identifier h
Arithmatic -
Relational >
Identifier rear
Arithmatic -
Integer 1
Delimiter ,
Identifier j
Assign =
Function getParent(
Identifier i
Delimiter )
SpDelim ;
Function while(
Identifier i
Relational >
Integer 0
Logical &&
Identifier j
Relational >=
Integer 0
Logical &&
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Relational <
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier j
Delimiter ]
Delimiter )
SpDelim {
Function swap(
SpecialCharacters &
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Delimiter ,
SpecialCharacters &
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier j
Delimiter ]
Delimiter )
SpDelim ;
Identifier i
Assign =
Identifier j
SpDelim ;
Identifier j
Assign =
Function getParent(
Identifier i
Delimiter )
SpDelim ;
SpDelim }
Keyword return
SpDelim ;
SpDelim }
INT int
Function removeEle(
Identifier minHeap
Arithmatic *
Identifier h
Delimiter )
SpDelim {
Function if(
Identifier h
Arithmatic -
Relational >
Identifier rear
Relational ==
Integer 0
Delimiter )
Keyword return
Constant INT_MIN
SpDelim ;
Function if(
Identifier h
Arithmatic -
Relational >
Identifier rear
Relational ==
Integer 1
Delimiter )
SpDelim {
Identifier h
Arithmatic -
Relational >
Identifier rear
Arithmatic -
Arithmatic -
SpDelim ;
Keyword return
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier h
Arithmatic -
Relational >
Identifier rear
Delimiter ]
SpDelim ;
SpDelim }
Function swap(
SpecialCharacters &
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Integer 0
Delimiter ]
Delimiter ,
SpecialCharacters &
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier h
Arithmatic -
Relational >
Identifier rear
Arithmatic -
Integer 1
Delimiter ]
Delimiter )
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier rear
Arithmatic -
Arithmatic -
SpDelim ;
INT int
Identifier i
Assign =
Integer 0
Delimiter ,
Identifier j
Assign =
Integer 0
Delimiter ,
Identifier k
Assign =
Integer 0
Delimiter ,
Identifier min_index
Assign =
Integer 0
SpDelim ;
Identifier j
Assign =
Delimiter (
Integer 2
Arithmatic *
Identifier i
Delimiter )
Arithmatic +
Integer 1
SpDelim ;
Identifier k
Assign =
Delimiter (
Integer 2
Arithmatic *
Identifier i
Delimiter )
Arithmatic +
Integer 2
SpDelim ;
Function while(
Identifier j
Relational <
Identifier h
Arithmatic -
Relational >
Identifier rear
Logical &&
Identifier k
Relational <
Identifier h
Arithmatic -
Relational >
Identifier rear
Delimiter )
SpDelim {
Function if(
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier min_index
Delimiter ]
Relational >
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier j
Delimiter ]
Delimiter )
Identifier min_index
Assign =
Identifier j
SpDelim ;
Function if(
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier min_index
Delimiter ]
Relational >
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier k
Delimiter ]
Delimiter )
Identifier min_index
Assign =
Identifier k
SpDelim ;
Function if(
Identifier min_index
Relational ==
Identifier i
Delimiter )
Keyword break
SpDelim ;
Keyword else
Function swap(
SpecialCharacters &
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Delimiter ,
SpecialCharacters &
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier min_index
Delimiter ]
Delimiter )
SpDelim ;
Identifier i
Assign =
Identifier min_index
SpDelim ;
Identifier j
Assign =
Delimiter (
Integer 2
Arithmatic *
Identifier i
Delimiter )
Arithmatic +
Integer 1
SpDelim ;
Identifier k
Assign =
Delimiter (
Integer 2
Arithmatic *
Identifier i
Delimiter )
Arithmatic +
Integer 2
SpDelim ;
SpDelim }
Keyword return
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier h
Arithmatic -
Relational >
Identifier rear
Delimiter ]
SpDelim ;
SpDelim }
Keyword void
Function heapify(
Identifier minHeap
Arithmatic *
Identifier h
Delimiter ,
INT int
Identifier i
Delimiter ,
INT int
Keyword size
Delimiter )
SpDelim {
Function if(
Identifier h
Arithmatic -
Relational >
Keyword size
Relational ==
Integer 0
Delimiter )
Keyword return
SpDelim ;
Function if(
Identifier i
Relational <
Integer 0
Logical ||
Identifier i
Relational >=
Identifier h
Arithmatic -
Relational >
Keyword size
Delimiter )
Keyword return
SpDelim ;
INT int
Identifier j
Assign =
Delimiter (
Integer 2
Arithmatic *
Identifier i
Delimiter )
Arithmatic +
Integer 1
SpDelim ;
INT int
Identifier k
Assign =
Delimiter (
Integer 2
Arithmatic *
Identifier i
Delimiter )
Arithmatic +
Integer 2
SpDelim ;
INT int
Identifier min_index
Assign =
Identifier i
SpDelim ;
Function if(
Identifier j
Relational <
Keyword size
Logical &&
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier min_index
Delimiter ]
Relational >
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier j
Delimiter ]
Delimiter )
Identifier min_index
Assign =
Identifier j
SpDelim ;
Function if(
Identifier k
Relational <
Keyword size
Logical &&
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier min_index
Delimiter ]
Relational >
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier k
Delimiter ]
Delimiter )
Identifier min_index
Assign =
Identifier k
SpDelim ;
Function if(
Identifier min_index
Relational !=
Identifier i
Delimiter )
SpDelim {
Function swap(
SpecialCharacters &
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Delimiter ,
SpecialCharacters &
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier min_index
Delimiter ]
Delimiter )
SpDelim ;
Function heapify(
Identifier h
Delimiter ,
Identifier min_index
Delimiter ,
Keyword size
Delimiter )
SpDelim ;
SpDelim }
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function heapSort(
Identifier minHeap
Arithmatic *
Identifier h
Delimiter )
SpDelim {
Function for(
INT int
Identifier i
Assign =
Identifier h
Arithmatic -
Relational >
Identifier rear
Arithmatic -
Integer 1
SpDelim ;
Identifier i
Relational >
Integer 0
SpDelim ;
Identifier i
Arithmatic -
Arithmatic -
Delimiter )
SpDelim {
Function swap(
SpecialCharacters &
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Integer 0
Delimiter ]
Delimiter ,
SpecialCharacters &
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Delimiter )
SpDelim ;
Function heapify(
Identifier h
Delimiter ,
Integer 0
Delimiter ,
Identifier i
Delimiter )
SpDelim ;
SpDelim }
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function deleteHeap(
Identifier minHeap
Arithmatic *
Identifier h
Delimiter )
SpDelim {
Function free(
Identifier h
Arithmatic -
Relational >
Identifier arr
Delimiter )
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier arr
Assign =
Constant NULL
SpDelim ;
Identifier h
Arithmatic -
Relational >
Identifier rear
Assign =
Identifier h
Arithmatic -
Relational >
Keyword size
Assign =
Integer 0
SpDelim ;
Keyword return
SpDelim ;
SpDelim }
Keyword void
Function displayHeap(
Identifier minHeap
Identifier h
Delimiter )
SpDelim {
Function if(
Identifier h
Delimiter .
Identifier rear
Relational ==
Integer 0
Delimiter )
Keyword return
SpDelim ;
Function for(
INT int
Identifier i
Assign =
Integer 0
SpDelim ;
Identifier i
Relational <
Identifier h
Delimiter .
Identifier rear
SpDelim ;
Identifier i
Relational ++
Delimiter )
Function printf(
String "%d "
Delimiter ,
Identifier h
Delimiter .
Identifier arr
Delimiter [
Identifier i
Delimiter ]
Delimiter )
SpDelim ;
Keyword return
SpDelim ;
SpDelim }





 Total Tokens = 778